#!/usr/bin/env bash

set -e

if [[ "${COMMAND_WRAPPER_VERBOSITY:-}" == 'annoying' ]]; then
    set -x
fi

# shellcheck source=/dev/null
source ~/.local/src/github.com/trskop/command-wrapper/bash/lib.sh

function printHelp() {
    local -r command="${COMMAND_WRAPPER_NAME} ${COMMAND_WRAPPER_SUBCOMMAND}"
    local -r commandHelp="${COMMAND_WRAPPER_NAME} help ${COMMAND_WRAPPER_SUBCOMMAND}"

    cat <<EOF
Let user select a relevant file to edit based on various sorces.  By default it
looks for GHC error messages in Tmux scrollback buffer and lists files where
they were encountered.

Usage:

  ${command} [--tmux|-t]
  ${command} {--git-status|-g}
  ${command} {--git-commit|-G} [COMMIT]
  ${command} {--help|-h}
  ${commandHelp}

Options:

  --tmux, -t (DEFAULT)
    Look for GHC error messages in Tmux scrollback buffer.  This is the default
    mode, when no options are specified.

  --git-status, -g
    Use 'git status' command as a source instead of Tmux scrollback buffer.

  --git-commit [COMMIT], -G [COMMIT]
    Use list of files changed as part of a COMMIT as a source instead of Tmux
    scrollback buffer.  Defaults to 'HEAD' if COMMIT is not specified.

  --file={FILE|-}, --file {FILE|-}, -f {FILE|-}
    Read list of files from FILE or stdin.

  --root-dir=DIR, --root-dir DIR
    When executing editor use this directory as a parent dir for the file that
    is being edited.

  --syntax=SYNTAX, --syntax SYNTAX
    Select SYNTAX of input from which filenames will be parsed.  Possible
    values for SYNTAX are: plain (just list of files, ghc (Haskell compiler)
    and psc (PureScript compiler).  This optinon is ignored when '--git-status'
    or '--git-commit' was specified.

  --help, -h
    Print short help message and exit.  Same as: ${commandHelp}

See yx-jmp(1) manual page for documentation.
EOF
}

function declareCfg() {
    dhall-to-bash --declare 'menuCommand' <<EOF
let i = ${COMMAND_WRAPPER_CONFIG}
in  [i.menu.command] # i.menu.arguments
EOF
    # Command 'dhall-to-bash' doesn't produce new lines.  It can get important
    # when chaining multiple declarations.
    echo
}

function startEditor() {
    local -r rootDir="$1"; shift
    local params=''
    read -r params

    if [[ -z "${params}" ]]; then
        notice "Nothing selected, exiting."
        exit 0
    fi

    # Line is in the form "FILE +LINE".  This should work even if FILE contains
    # spaces.
    local -r file="${rootDir%/}${rootDir:+/}${params% +[0-9]*}"
    local -r line="${params##* +}"

    eval "$(dhall-to-bash --declare 'editorCommand' <<EOF
let editor = (${COMMAND_WRAPPER_CONFIG}).editor "${file}" ${line}
in  [editor.command] # editor.arguments
EOF
        )"

    # shellcheck disable=SC2154
    exec "${editorCommand[@]}"
}

function main() {
    dieIfExecutedOutsideOfCommandWrapperEnvironment

    # Should we switch operation mode to using Git command as a source?
    #
    # 0 -- No, use Tmux scrollback buffer.
    # 1 -- Yes, use 'git status'.
    local doGitAction=0

    # Allowed values are:
    #
    # - `status` -- Use `git status` as a source.
    # - `commit` -- Use list of files changed as part of a specified commit as
    #   a source.
    local gitAction=''

    # Used to store git commit reference in case of following configuration:
    #
    #     doGitAction=0 gitAction='commit'
    #
    # Empty value is valid and defaults to `HEAD`.
    local gitCommit=''

    local rootDir=''
    local inputFile=''
    local syntax='ghc'

    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            --help|-h)
                printHelp
                exit 0
                ;;
            --tmux|-t)
                doGitAction=0
                ;;
            --git-status|-g)
                doGitAction=1
                gitAction='status'
                ;;
            --git-commit|-G)
                doGitAction=1
                gitAction='commit'
                ;;
            --file|-f)
                if (( ! $# )); then
                    die 1 "'%s': Missing argument DIR." "${arg}"
                fi
                doGitAction=0
                inputFile="$1"; shift
                ;;
            --file=*)
                doGitAction=0
                inputFile="${arg#*=}"
                ;;
            --root-dir)
                if (( ! $# )); then
                    die 1 "'%s': Missing argument DIR." "${arg}"
                fi
                rootDir="$1"; shift
                ;;
            --root-dir=*)
                rootDir="${arg#*=}"
                ;;
            --syntax)
                if (( ! $# )); then
                    die 1 "'%s': Missing argument DIR." "${arg}"
                fi
                syntax="$(tr '[:upper:]' '[:lower:]' <<< "$1")"; shift
                ;;
            --syntax=*)
                syntax="$(tr '[:upper:]' '[:lower:]' <<< "${arg#*=}")"
                ;;
            -*)
                die 1 "'%s': Unknown option." "${arg}"
                ;;
            *)
                if  [[ "${doGitAction}" -eq 1 \
                    && "${gitAction}" == 'commit' \
                    && -z "${gitCommit}"
                    ]]
                then
                    gitCommit="${arg}"
                else
                    die 1 "'%s': Too many arguments." "${arg}"
                fi
                ;;
        esac
    done

    case "${syntax}" in
      plain|ghc|psc)
        :
        ;;
      *)
        die 1 "'%s': Unrecognised syntax." "${syntax}"
        ;;
    esac

    if [[ ! -e "${COMMAND_WRAPPER_CONFIG}" ]]; then
        die 1 "'%s': Configuration file doesn't exist, see yx-jmp(1)." \
            "${COMMAND_WRAPPER_CONFIG}"
    fi

    if (( doGitAction )); then
        runGitAction "${rootDir}" "${gitAction}" "${gitCommit}"
    elif [[ -n "${inputFile}" ]]; then
        readFile "${rootDir}" "${syntax}" "${inputFile}"
    else
        tmuxScrollback "${rootDir}" "${syntax}"
    fi
}

function runGitAction() {
    local -r rootDir="$1"; shift
    local -r action="$1"; shift
    local -r commit="$1"; shift

    if ! type git >/dev/null; then
        # Status code choosen based on command-wrapper-subcommand-protocol(1)
        # manual page section EXIT STATUS.
        die 127 "'git': Command not found."
    fi

    case "${action}" in
        'status')
            gitStatus "${rootDir}"
            ;;
        'commit')
            gitCommit "${rootDir}" "${commit}"
            ;;
        *)
            die 4 "'%s': Unknown internal Git action; probably a bug." \
                "${action}"
            ;;
    esac
}

function gitStatus() {
    local -r rootDir="$1"; shift
    eval "$(declareCfg)"

    # TODO:
    #
    # - Line number is mostly irrelevant here.  Figure a sensible default,
    #   or allow users to handle it in the configuration file.
    #
    # - Detect that the imput is empty and notify user instead of starting
    #   "${menuCommand[@]}".

    # shellcheck disable=SC2154
    git status -s \
    | sed 's/^.. \(.*\)$/\1 +1/' \
    | "${menuCommand[@]}" \
    | startEditor "${rootDir}"
}

function gitCommit() {
    local -r rootDir="$1"; shift
    local -r commit="$1"; shift

    eval "$(declareCfg)"

    # TODO:
    #
    # - Line number is mostly irrelevant here.  Figure a sensible default,
    #   or allow users to handle it in the configuration file.
    #
    # - Detect that the imput is empty and notify user instead of starting
    #   "${menuCommand[@]}".

    # shellcheck disable=SC2154
    git diff-tree --no-commit-id --name-only -r "${commit:-HEAD}" \
    | sed -r "s|^(.*)\$|$(git rev-parse --show-toplevel)/\\1 +1|" \
    | "${menuCommand[@]}" \
    | startEditor "${rootDir}"
}

# Usage:
#
#   parseInput SYNTAX [FILE]
function parseInput() {
    local -r syntax="$1"; shift
    local substitution='s/(.*)/\1 +0/'

    case "${syntax}" in
      ghc)
        substitution='s/^ *(.*):([0-9]+):[0-9]+: error:.*$/\1 +\2/'
        ;;
      psc)
        substitution='s/^\[[^]]+\] *(.*):([0-9]+):[0-9]+.*$/\1 +\2/'
        ;;
    esac

    sed -rn "${substitution};T;p" -- "$@"
}

# Usage:
#
#   tmuxScrollback ROOT_DIR SYNTAX
function tmuxScrollback() {
    local -r rootDir="$1"; shift
    local -r syntax="$1"; shift

    if [[ -z "${TMUX}" || -z "${TMUX_PANE}" ]]; then
        die 3 "Not running in a Tmux pane, see yx-jmp(1)."
    fi

    eval "$(declareCfg)"

    # TODO:
    #
    # - Detect that the imput is empty and notify user instead of starting
    #   "${menuCommand[@]}".
    tmux capture-pane -S - -b scroll-buffer \; show-buffer -b scroll-buffer \; delete-buffer -b scroll-buffer \
    | parseInput "${syntax}" \
    | uniq \
    | "${menuCommand[@]}" \
    | startEditor "${rootDir}"
}

# Usage:
#
#   readFile ROOT_DIR SYNTAX {FILE|-}
function readFile() {
    local -r rootDir="$1"; shift
    local -r syntax="$1"; shift
    local -r inputFile="$1"; shift

    eval "$(declareCfg)"

    {
        if [[ "${inputFile}" = '-' ]]; then
            parseInput "${syntax}"
        else
            parseInput "${syntax}" "${inputFile}"
        fi
    } \
    | uniq \
    | "${menuCommand[@]}" \
    | startEditor "${rootDir}"
}

main "$@"
