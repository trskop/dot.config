#!/usr/bin/env bash

set -e

if [[ "${COMMAND_WRAPPER_VERBOSITY:-}" == 'annoying' ]]; then
    set -x
fi

# shellcheck source=/dev/null
source <(
    COMMAND_WRAPPER_INVOKE_AS="${COMMAND_WRAPPER_NAME}" "${COMMAND_WRAPPER_EXE}" \
        completion --library --shell=bash
)

function printHelp() {
    local -r command="${COMMAND_WRAPPER_NAME} ${COMMAND_WRAPPER_SUBCOMMAND}"
    local -r commandHelp="${COMMAND_WRAPPER_NAME} help ${COMMAND_WRAPPER_SUBCOMMAND}"

    cat <<EOF
Let user select a relevant file to edit based on various sorces.  By default it
looks for GHC error and warning messages in scrollback buffer, and lists files
where they were encountered.

Usage:

  ${command} [--auto|--tmux|-t|--kitty|-k] [--root-dir=DIR] [--syntax=SYNTAX]
  ${command} [--file={FILE|-}|-f {FILE|-}] [--root-dir=DIR] [--syntax=SYNTAX]
  ${command} {--git-status|-g}
  ${command} {--git-commit|-G} [COMMIT]
  ${command} --git-grep GIT_GREP_ARGUMENTS
  ${command} {--help|-h}
  ${commandHelp}

Options:
  --auto (DEFAULT)
      Use heuristic to decide if running in Tmux or Kitty.

  --tmux, -t
      Look for files to open in Tmux scrollback buffer.

  --kitty, -k
      Look for files to open in Kitty terminal emulator scrollback buffer.

  --git-status, -g
      Use 'git status' command as a source instead of Tmux scrollback buffer.

  --git-commit [COMMIT], -G [COMMIT]
      Use list of files changed as part of a COMMIT as a source instead of Tmux
      scrollback buffer.  Defaults to 'HEAD' if COMMIT is not specified.

  --git-grep GIT_GREP_ARGUMENTS
      Same as:

        git grep GIT_GREP_ARGUMENTS \
        | yx jmp -f - --syntax=grep-with-line-numbers

  --file={FILE|-}, --file {FILE|-}, -f {FILE|-}
      Read list of files from FILE or stdin.

  --root-dir=DIR, --root-dir DIR
      When executing editor use this directory as a parent dir for the file
      that is being edited.

  --syntax=SYNTAX, --syntax SYNTAX
      Select SYNTAX of input from which filenames will be parsed.  Possible
      values for SYNTAX are:

      * plain (just list of files)
      * ghc (Haskell compiler)
      * psc (PureScript compiler)
      * grep (output of grep command)
      * grep-with-line-numbers (output of grep command when invoked with
        '{-n|--line-number}' option; 'git grep' output has this format by
        default)

      This optinon is ignored when one of '--git-*' options was specified.

  --[no-]neovim-remote
      Allow/disable Neovim remote control functionality when
      'NVIM_LISTEN_ADDRESS' environment variable is set.  When enabled 'yx jmp'
      will try to open file in remote Neovim instead of starting a new editor
      process.

  --help, -h
      Print short help message and exit.  Same as: ${commandHelp}

See yx-jmp(1) manual page for documentation.
EOF
}

# Print Dhall expression that describes how this subcommand should be invoked
# when performing command line completion.  See
# `command-wrapper-subcommand-protocol(7)` for more details on how this works.
function completionInfo() {
    cat <<"EOF"
  λ(_ : <Bash : {} | Fish : {} | Zsh : {}>)
→ λ(index : Natural)
→ λ(words : List Text)
→ [ "--completion", "--index=${Natural/show index}", "--" ] # words
EOF
}

# Perform command line completion.
#
# Usage:
#
#   completion [--index=INDEX] [[--] WORD [...]]
#
# Bash itself provides `compgen` builtin command that can do a lot of standard
# command line completion functions.  See `bash(1)` or `help compgen` for more
# details.
function completion() {
    local index=-1
    local -a words=

    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            --index=*)
                index="${arg#*=}"
                ;;
            --)
                words=("$@")
                break
                ;;
            -*)
                die 1 "'%s': Unknown completion option." "${arg}"
                ;;
            *)
                words=("${arg}" "$@")
                break
                ;;
        esac
    done

    if (( ! ${#words[@]} )); then
        words=("")
    fi

    # TODO: This completion is quite naive.
    local -r options="--auto
--tmux -t
--kitty -k
--git-status -g
--git-commit -G
--git-grep
--file= --file -f
--root-dir= --root-dir
--syntax --syntax=plain --syntax=ghc --syntax=psc --syntax=grep
  --syntax=grep-with-line-numbers
--help -h"

    compgen -W "${options}" -- "${words[${index}]}"
}

function declareCfg() {
    dhall-to-bash --declare 'menuCommand' <<EOF
let i = ${COMMAND_WRAPPER_CONFIG}
in  [i.menu.command] # i.menu.arguments
EOF
    # Command 'dhall-to-bash' doesn't produce new lines.  It can get important
    # when chaining multiple declarations.
    echo
}

function startEditor() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift
    local params=''
    read -r params

    if [[ -z "${params}" ]]; then
        notice "Nothing selected, exiting."
        exit 0
    fi

    # Line is in the form "FILE +LINE".  This should work even if FILE contains
    # spaces.
    local -r file="${rootDir%/}${rootDir:+/}${params% +[0-9]*}"
    local -r line="${params##* +}"

    if (( allowNeovimRemote )) && [[ -n "${NVIM_LISTEN_ADDRESS}" ]]; then
        eval "$(dhall-to-bash --declare 'editorCommand' <<EOF
let editor = (${COMMAND_WRAPPER_CONFIG}).neovimRemote "${file}" ${line}
in  [editor.command] # editor.arguments
EOF
        )"
    else
        eval "$(dhall-to-bash --declare 'editorCommand' <<EOF
let editor = (${COMMAND_WRAPPER_CONFIG}).editor "${file}" ${line}
in  [editor.command] # editor.arguments
EOF
        )"
    fi

    # shellcheck disable=SC2154
    exec "${editorCommand[@]}"
}

function main() {
    dieIfExecutedOutsideOfCommandWrapperEnvironment

    # Should we switch operation mode to using Git command as a source?
    #
    # 0 -- No, use Tmux scrollback buffer.
    # 1 -- Yes, use 'git status'.
    local doGitAction=0

    # Allowed values are:
    #
    # - `status` -- Use `git status` as a source.
    # - `commit` -- Use list of files changed as part of a specified commit as
    #   a source.
    # - `grep` -- Use 'git grep' as an input.
    local gitAction=''

    # Used to store git commit reference in case of following configuration:
    #
    #     doGitAction=0 gitAction='commit'
    #
    # Empty value is valid and defaults to `HEAD`.
    local gitCommit=''

    # Used to store additional arguments for Git command when invoked with
    # doGitAction=1.
    local -a gitActionArguments=()

    local rootDir=''
    local inputFile=''

    # Input syntax can be either one of:
    #
    # - `plain` -- Just filenames, no parsing.  Nice for things like `ls`.
    # - `ghc` -- GHC error and warning messages are parsed.
    # - `psc` -- PureScript compiler `psc` error and warning messages are
    #   parsed.
    # - `grep`
    # - `grep-with-line-numbers`
    local syntax='ghc'

    # Use terminal-specific way of accessing its scrollback buffer.
    #
    # - `auto` -- Detect if we are running in a supported terminal and do
    #   appropriate action.
    # - `tmux` -- Expect to be running in a Tmux pane.
    # - `kitty` -- Expect to be running in Kitty terminal emulator.
    local expectTerminal='auto'

    local allowNeovimRemote=1

    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            --help|-h)
                printHelp
                exit 0
                ;;
            --completion-info)
                completionInfo
                exit 0
                ;;
            --completion)
                completion "$@"
                exit 0
                ;;

            # TODO: We should consider using '--tty=NAME' instead.  Adding
            # ad-hoc options is not the way to go.
            --auto)
                expectTerminal='auto'
                ;;
            --tmux|-t)
                doGitAction=0
                expectTerminal='tmux'
                ;;
            --kitty|-k)
                doGitAction=0
                expectTerminal='kitty'
                ;;
            --git-status|-g)
                doGitAction=1
                gitAction='status'
                ;;
            --git-commit|-G)
                doGitAction=1
                gitAction='commit'
                ;;
            --git-grep)
                doGitAction=1
                gitAction='grep'
                gitActionArguments=("$@")
                break;
                ;;
            --file|-f)
                if (( ! $# )); then
                    die 1 "'%s': Missing argument DIR." "${arg}"
                fi
                doGitAction=0
                inputFile="$1"; shift
                ;;
            --file=*)
                doGitAction=0
                inputFile="${arg#*=}"
                ;;
            --root-dir)
                if (( ! $# )); then
                    die 1 "'%s': Missing argument DIR." "${arg}"
                fi
                rootDir="$1"; shift
                ;;
            --root-dir=*)
                rootDir="${arg#*=}"
                ;;
            --syntax)
                if (( ! $# )); then
                    die 1 "'%s': Missing argument DIR." "${arg}"
                fi
                syntax="$(tr '[:upper:]' '[:lower:]' <<< "$1")"; shift
                ;;
            --syntax=*)
                syntax="$(tr '[:upper:]' '[:lower:]' <<< "${arg#*=}")"
                ;;
            --neovim-remote)
                allowNeovimRemote=0
                ;;
            --no-neovim-remote)
                allowNeovimRemote=1
                ;;
            -*)
                die 1 "'%s': Unknown option." "${arg}"
                ;;
            *)
                if  [[ "${doGitAction}" -eq 1 \
                    && "${gitAction}" == 'commit' \
                    && -z "${gitCommit}"
                    ]]
                then
                    gitCommit="${arg}"
                else
                    die 1 "'%s': Too many arguments." "${arg}"
                fi
                ;;
        esac
    done

    case "${syntax}" in
      plain|ghc|psc|grep|grep-with-line-number)
        :
        ;;
      *)
        die 1 "'%s': Unrecognised syntax." "${syntax}"
        ;;
    esac

    if [[ ! -e "${COMMAND_WRAPPER_CONFIG}" ]]; then
        die 1 "'%s': Configuration file doesn't exist, see yx-jmp(1)." \
            "${COMMAND_WRAPPER_CONFIG}"
    fi

    if (( doGitAction )); then
        runGitAction "${allowNeovimRemote}" "${rootDir}" "${gitAction}" \
            "${gitCommit}" "${gitActionArguments[@]}"
    elif [[ -n "${inputFile}" ]]; then
        readFile "${allowNeovimRemote}" "${rootDir}" "${syntax}" "${inputFile}"
    else
        # TODO: This logic should probably be in a function.
        case "${expectTerminal}" in
            auto)
                if [[ -n "${VIM}" && -n "${VIMRUNTIME}" ]]; then
                    # Running inside Vim/Neovim terminal
                    die 3 "Not running in a neither Kitty nor Tmux, see yx-jmp(1)."
                elif [[ -n "${TMUX}" && -n "${TMUX_PANE}" ]]; then
                    tmuxScrollback "${allowNeovimRemote}" "${rootDir}" \
                        "${syntax}"
                elif [[ -n "${KITTY_WINDOW_ID}" || "${TERM}" == 'xterm-kitty' ]]; then
                    kittyScrollback "${allowNeovimRemote}" "${rootDir}" \
                        "${syntax}"
                else
                    die 3 "Not running in a neither Kitty nor Tmux, see yx-jmp(1)."
                fi
                ;;
            kitty)
                if [[ -z "${KITTY_WINDOW_ID}" && "${TERM}" != 'xterm-kitty' ]]; then
                    die 3 "Not running in a Kitty terminal emulator, see yx-jmp(1)."
                fi
                if [[ -n "${VIM}" && -n "${VIMRUNTIME}" ]]; then
                    # Running inside Vim/Neovim terminal
                    die 3 "Not running in a Kitty terminal emulator, see yx-jmp(1)."
                fi

                kittyScrollback "${allowNeovimRemote}" "${rootDir}" "${syntax}"
                ;;
            tmux)
                if [[ -z "${TMUX}" || -z "${TMUX_PANE}" ]]; then
                    die 3 "Not running in a Tmux pane, see yx-jmp(1)."
                fi
                if [[ -n "${VIM}" && -n "${VIMRUNTIME}" ]]; then
                    # Running inside Vim/Neovim terminal
                    die 3 "Not running in a Kitty terminal emulator, see yx-jmp(1)."
                fi

                tmuxScrollback "${allowNeovimRemote}" "${rootDir}" "${syntax}"
                ;;
        esac
    fi
}

# Usage:
#
#   runGitAction ROOT_DIR {status|commit|grep} {COMMIT|''} [EXTRA_ARGUMENT ...]
function runGitAction() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift
    local -r action="$1"; shift
    local -r commit="$1"; shift

    # Extra arguments passed to Git subcommand.  Only used in certain cases.
    local -ra arguments=("$@")

    if ! type git >/dev/null; then
        # Status code choosen based on command-wrapper-subcommand-protocol(1)
        # manual page section EXIT STATUS.
        die 127 "'git': Command not found."
    fi

    case "${action}" in
        'status')
            gitStatus "${allowNeovimRemote}" "${rootDir}"
            ;;
        'commit')
            gitCommit "${allowNeovimRemote}" "${rootDir}" "${commit}"
            ;;
        'grep')
            gitGrep "${allowNeovimRemote}" "${rootDir}" "${arguments[@]}"
            ;;
        *)
            die 4 "'%s': Unknown internal Git action; probably a bug." \
                "${action}"
            ;;
    esac
}

function gitStatus() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift
    local -ra arguments=("$@")

    eval "$(declareCfg)"

    # TODO:
    #
    # - Line number is mostly irrelevant here.  Figure a sensible default,
    #   or allow users to handle it in the configuration file.
    #
    # - Detect that the imput is empty and notify user instead of starting
    #   "${menuCommand[@]}".

    # shellcheck disable=SC2154
    git status -s "${arguments[@]}" \
    | sed 's/^.. \(.*\)$/\1 +1/' \
    | "${menuCommand[@]}" \
    | startEditor "${allowNeovimRemote}" "${rootDir}"
}

function gitCommit() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift
    local -r commit="$1"; shift

    eval "$(declareCfg)"

    # TODO:
    #
    # - Line number is mostly irrelevant here.  Figure a sensible default,
    #   or allow users to handle it in the configuration file.
    #
    # - Detect that the imput is empty and notify user instead of starting
    #   "${menuCommand[@]}".

    # shellcheck disable=SC2154
    git diff-tree --no-commit-id --name-only -r "${commit:-HEAD}" \
    | sed -r "s|^(.*)\$|$(git rev-parse --show-toplevel)/\\1 +1|" \
    | "${menuCommand[@]}" \
    | startEditor "${allowNeovimRemote}" "${rootDir}"
}

# Usage:
#
#   gitGrep ROOT_DIR [ARGUMENT ...]
function gitGrep() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift

    git grep "$@" | readFile "${rootDir}" 'grep-with-line-numbers' -
}

# Usage:
#
#   parseInput SYNTAX [FILE]
function parseInput() {
    local -r syntax="$1"; shift
    local substitution='s/(.*)/\1 +0/'

    case "${syntax}" in
      ghc)
        substitution='s/^ *(.*):([0-9]+):[0-9]+: (error|warning):.*$/\1 +\2/'
        ;;
      psc)
        substitution='s/^\[[^]]+\] *(.*):([0-9]+):[0-9]+.*$/\1 +\2/'
        ;;
      grep)
        # ${file}:${lineContent}
        substitution='s/^([^:]+):.*$/\1 +0/'
        ;;
      grep-with-line-numbers)
        # ${file}:${lineNumber}:${lineContent}
        substitution='s/^([^:]+):([0-9]+):.*$/\1 +\2/'
        ;;
    esac

    sed -rn "${substitution};T;p" -- "$@"
}

# Usage:
#
#   tmuxScrollback ROOT_DIR SYNTAX
function tmuxScrollback() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift
    local -r syntax="$1"; shift

    eval "$(declareCfg)"

    # TODO:
    #
    # - Detect that the imput is empty and notify user instead of starting
    #   "${menuCommand[@]}".
    tmux capture-pane -S - -b scroll-buffer \; show-buffer -b scroll-buffer \; delete-buffer -b scroll-buffer \
    | parseInput "${syntax}" \
    | uniq \
    | "${menuCommand[@]}" \
    | startEditor "${allowNeovimRemote}" "${rootDir}"
}

# Usage:
#
#   kittyScrollback ROOT_DIR SYNTAX
function kittyScrollback() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift
    local -r syntax="$1"; shift

    eval "$(declareCfg)"

    # For some reason accessing Kitty scrollback buffer directly in a pipeline
    # gets stuck.  The Python script responsible for it reports broken
    # pipeline. Problem is probably buffering and how it's detected.  Using
    # temporary bypasses the issue quite nicely, however, we need to make sure
    # that the scrollback buffer is not freely available.  It contains
    # sensitive data.
    #
    # TODO:
    #
    # * Remove temp file afterwards. Maybe using subshell via (...)?
    # * Is ~/.cache good default?
    # * We should probably create and use "${XDG_RUNTIME_DIR:-~/.cache}/yx-jmp"
    #   instead of putting these files there directly.
    local temp
    temp=$(
        mktemp --tmpdir="${XDG_RUNTIME_DIR:-~/.cache}" \
            "${COMMAND_WRAPPER_NAME}-${COMMAND_WRAPPER_SUBCOMMAND}.XXXXXXXXXX"
    )
    kitty @ get-text --extent all --self > "${temp}"

    # TODO:
    #
    # - Detect that the imput is empty and notify user instead of starting
    #   "${menuCommand[@]}".
    parseInput "${syntax}" "${temp}" \
    | uniq \
    | "${menuCommand[@]}" \
    | startEditor "${allowNeovimRemote}" "${rootDir}"
}

# Usage:
#
#   readFile ROOT_DIR SYNTAX {FILE|-}
function readFile() {
    local -r -i allowNeovimRemote="$1"; shift
    local -r rootDir="$1"; shift
    local -r syntax="$1"; shift
    local -r inputFile="$1"; shift

    eval "$(declareCfg)"

    {
        if [[ "${inputFile}" = '-' ]]; then
            parseInput "${syntax}"
        else
            parseInput "${syntax}" "${inputFile}"
        fi
    } \
    | uniq \
    | "${menuCommand[@]}" \
    | startEditor "${allowNeovimRemote}" "${rootDir}"
}

main "$@"
