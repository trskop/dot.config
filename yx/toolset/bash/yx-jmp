#!/usr/bin/env bash

set -e

source ~/.local/src/trskop/command-wrapper/bash/lib.sh

function printHelp() {
    local -r command="${COMMAND_WRAPPER_NAME} ${COMMAND_WRAPPER_SUBCOMMAND}"
    local -r commandHelp="${COMMAND_WRAPPER_NAME} help ${COMMAND_WRAPPER_SUBCOMMAND}"

    cat <<EOF
Let user select a relevant file to edit based on various sorces.  By default it
looks for GHC error messages in Tmux scrollback buffer and lists files where
they were encountered.

Usage:

  ${command} [--tmux|-t]
  ${command} {--git-status|-g}
  ${command} {--help|-h}
  ${commandHelp}

Options:

  -t, --tmux (DEFAULT)
    Look for GHC error messages in Tmux scrollback buffer.  This is the default
    mode, when no options are specified.

  -g, --git-status
    Use 'git status' command as a source instead of scrollback buffer.

  -h, --help
    Print short help message and exit.  Same as: ${commandHelp}

See yx-jmp(1) manual page for documentation.
EOF
}

function declareCfg() {
    dhall-to-bash --declare 'menuCommand' <<EOF
let i = ${COMMAND_WRAPPER_CONFIG}
in  [i.menu.command] # i.menu.arguments
EOF
    # Command 'dhall-to-bash' doesn't produce new lines.  It can get important
    # when chaining multiple declarations.
    echo
}

function startEditor() {
    local params=''
    read params

    if [[ -z "${params}" ]]; then
        notice "Nothing selected, exiting."
        exit 0
    fi

    # Line is in the form "FILE +LINE".  This should work even if FILE contains
    # spaces.
    local -r file="${params% +[0-9]*}"
    local -r line="${params##* +}"

    eval $(dhall-to-bash --declare 'editorCommand' <<EOF
let editor = (${COMMAND_WRAPPER_CONFIG}).editor "${file}" ${line}
in  [editor.command] # editor.arguments
EOF
        )

    exec "${editorCommand[@]}"
}

function main() {
    dieIfExecutedOutsideOfCommandWrapperEnvironment

    # Should we switch operation mode to using 'git status' as a source?
    #
    # 0 -- No, use Tmux scrollback buffer.
    # 1 -- Yes, use 'git status'.
    local doGitStatus=0

    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            --help|-h)
                printHelp
                exit 0
                ;;
            --tmux|-t)
                doGitStatus=0
                ;;
            --git-status|-g)
                doGitStatus=1
                ;;
            -*)
                die 1 "'%s': Unknown option." "${arg}"
                ;;
            *)
                die 1 "'%s': Too many arguments." "${arg}"
                ;;
        esac
    done

    if [[ ! -e "${COMMAND_WRAPPER_CONFIG}" ]]; then
        die 1 "'%s': Configuration file doesn't exist, see yx-jmp(1)." \
            "${COMMAND_WRAPPER_CONFIG}"
    fi

    if (( doGitStatus )); then
        gitStatus
    else
        tmuxScrollback
    fi
}

function gitStatus() {
    if ! type git >/dev/null; then
        # Status code choosen based on command-wrapper-subcommand-protocol(1)
        # manual page section EXIT STATUS.
        die 127 "'git': Command not found."
    fi

    eval "$(declareCfg)"

    # TODO: Line number is mostly irrelevant here.  Figure a sensible default,
    # or allow users to handle it in the configuration file.
    git status -s \
    | sed 's/^.. \(.*\)$/\1 +1/' \
    | "${menuCommand[@]}" \
    | startEditor
}

function tmuxScrollback() {
    if [[ -z "${TMUX}" || -z "${TMUX_PANE}" ]]; then
        die 3 "Not running in a Tmux pane, see yx-jmp(1)."
    fi

    eval "$(declareCfg)"

    tmux capture-pane -S - -b scroll-buffer \; show-buffer -b scroll-buffer \; delete-buffer -b scroll-buffer \
    | sed -rn 's/^ *(.*):([0-9]+):[0-9]+: error:.*$/\1 +\2/;T;p' \
    | uniq \
    | "${menuCommand[@]}" \
    | startEditor
}

main "$@"
