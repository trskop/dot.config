#!/usr/bin/env bash

# Copyright (c) 2010 - 2021 Peter Trsko <peter.trsko@gmail.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#     * Neither the name of Peter Trsko nor the names of other
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -eo pipefail

if (( BASH_VERSINFO[0] > 4 || ( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 4 ) )); then
    # Treat unset variables and parameters as an error when expanding.  This
    # wasn't very reliable in older Bash versions, hence the version check.
    set -u
fi

if [[ "${COMMAND_WRAPPER_VERBOSITY:-}" == 'annoying' ]]; then
    # This will cause Bash to print commands before executing them.
    set -x
fi

# shellcheck source=/dev/null
source <(
    COMMAND_WRAPPER_INVOKE_AS="${COMMAND_WRAPPER_NAME}" "${COMMAND_WRAPPER_EXE}" \
        completion --library --shell=bash
)

# Print help message to standard output.
function printHelp() {
    local -r command="${COMMAND_WRAPPER_NAME} ${COMMAND_WRAPPER_SUBCOMMAND}"

    cat <<EOF
Wrapper for curl/wget with the sole purpose of downloading files.

Usage:

  ${command} [OPTIONS] URL [--output=FILE|--output FILE| -o FILE]
  ${command} {--help|-h}
  ${COMMAND_WRAPPER_NAME} help [--man] ${COMMAND_WRAPPER_SUBCOMMAND}

Options:

  --config=FILE, --config FILE, -c FILE
    Download file based on configuration FILE. It has to contain at least one
    entry "URL=<url>".

  --output=FILE, --output FILE, -o FILE
    Use FILE as output file name. If output file name is not specified, then it
    is derived from URL.

  --no-checksum
    When downloading file based on specified URL then don't compute checksums.
    In case of download based on configuration file, with checksums specified,
    don't check them after successful download.

  --checksum
    (Turned on by default.)
    When downloading file based on specified URL then compute checksums.
    In case of download based on configuration file, with checksums specified,
    check them after successful download.

  --check=FILE
    Same as specifying \`--checksum', \`--no-download' and \`--config=FILE'
    together.

  --sha1=CHECKSUM, --sha256=CHECKSUM, --sha512=CHECKSUM, --md5=CHECKSUM
    Check if downloaded file matches CHECKSUM when downloaded. These options
    are ignored when downloading file based on configuration file where these
    can be entered.

  --http-proxy=[http://]HOST[:PORT], --http-proxy [http://]HOST[:PORT]
    Use specified HTTP proxy server by exporting http_proxy environment
    variable for wget/curl. Warning: this script doesn't check if HOST and PORT
    are syntactically valid values.

  --download, -d
    (Turned on by default.)
    Download file specified by URL or using \`.download' file.

  --no-download, -n
    Don't download, but create \`.download' file or if that is provided then
    just verify checksum(s).

  --help, -h
      Print short help message and exit.  Same as:

        ${COMMAND_WRAPPER_NAME} help ${COMMAND_WRAPPER_SUBCOMMAND}
EOF
}

# Print Dhall expression that describes how this subcommand should be invoked
# when performing command line completion.  See
# `command-wrapper-subcommand-protocol(7)` for more details on how this works.
function completionInfo() {
    stdCompletionInfo
}

# Perform command line completion.
#
# Usage:
#
#   completion [--index=INDEX] [--shell=SHELL] [[--] WORD [...]]
#
# Bash itself provides `compgen` builtin command that can do a lot of standard
# command line completion functions.  See `bash(1)` or `help compgen` for more
# details.
function completion() {
    local index=-1
    local -a words=

    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            --index=*)
                index="${arg#*=}"
                ;;
            --shell=*)
                # Ignored.
                ;;
            --)
                words=("$@")
                break
                ;;
            -*)
                die 1 "'%s': Unknown completion option." "${arg}"
                ;;
            *)
                words=("${arg}" "$@")
                break
                ;;
        esac
    done

    if (( ! ${#words[@]} )); then
        words=("")
    fi

    local currentWord=''
    if (( index < ${#words[@]} )); then
        currentWord="${words[${index}]}"
    fi

    local previousWord=''
    if (( index > 0 )); then
        previousWord="${words[$((index - 1))]}"
    fi

    local -r -a options=(
        --config= -c
        --output= -o
        --checksum --no-checksum
        --check=
        --sha1= --sha256= --sha512= --md5=
        --http-proxy=
        --download -d --no-download -n
        --help -h
    )

    case "${currentWord}" in
        --config=*|--output=*|--check=*)
            mapfile -t possibilities < <(
                compgen -f -- "${currentWord#*=}"
            )
            for possibility in "${possibilities[@]}"; do
                if [[ -d "${possibility}" ]]; then
                    echo "${currentWord%%=*}=${possibility}/"
                else
                    echo "${currentWord%%=*}=${possibility}"
                fi
            done

            ;;
        -*)
            compgen -W "${options[*]}" -- "${currentWord}"
            ;;
        *)
            if [[ "${previousWord}" == -[co] ]]; then
                local possibilities=()
                mapfile -t possibilities < <(
                    compgen -f -- "${currentWord}"
                )
                for possibility in "${possibilities[@]}"; do
                    if [[ -d "${possibility}" ]]; then
                        echo "${possibility}/"
                    else
                        echo "${possibility}"
                    fi
                done
            fi
            ;;
    esac
}

# Read configuration file in Dhall format and declare Bash variables based on
# what's in it.  Subcommand configuration files are required to be in Dhall
# format, however, if you are more comfortable with JSON or YAML then there
# are tools to convert Dhall into them:
#
# * 'dhall-to-json'
# * 'dhall-to-yaml'
#
# Best approach in such case would be to create a temporary file with
# JSON/YAML content that is then used as a configuration file instead.
#
# Note that Subcommands aren't required to use configuration files.  If you
# don't need to use it then delete this function and relevant code in the
# 'main' function.
function declareCfg() {
    local -r configFile="$1"; shift
    local -r name="$1"; shift

    dhall-to-bash \
        --declare="${name}" \
        --expression="(${configFile}).${name}"
}

function isCommandAvailable()
{
    local -r command="$1"; shift

    command -v "${command}" 1>&2 > /dev/null
}

function download()
{
    local -r url="$1"; shift
    local -r outFile="$1"; shift

    if isCommandAvailable 'wget'; then
        # [ -n "$outFile" ] && wget -O "$outFile" "$url" || wget "$url"
        wget -O "${outFile}" "${url}"
    elif isCommandAvailable 'curl'; then
        curl "${url}" > "${outFile}"
    fi
}

function mkChecksum()
{
    local -r hash="$1"; shift
    local -r file="$1"; shift
    local command=''
    local variableName=''

    case "$hash" in
      'MD5')
        variableName='MD5SUM'
        command='md5sum'
        ;;
      'SHA1')
        variableName='SHA1SUM'
        command='sha1sum'
        ;;
      'SHA256')
        variableName='SHA256SUM'
        command='sha256sum'
        ;;
      'SHA512')
        variableName='SHA512SUM'
        command='sha512sum'
        ;;
      *)
        warning '%s: Unknown hash algorithm.' "${hash}"
        return
        ;;
    esac

    if isCommandAvailable "${command}"; then
        "${command}" "${file}" \
        | sed 's/^\([^ ]\+\) .*$/'"${variableName}='\\1'/"
    else
        warning "%s: Command not found.\n  Can't create %s sum." \
            "${command}" "${hash}"
    fi
}

function logDateAndTime()
{
    local -r file="$1"; shift

    echo "TIMESTAMP='$(date --rfc-3339='seconds')'" >> "${file}"
}

function checkChecksum()
{
    local -r hash="$1"; shift
    local -r checksum="$1"; shift
    local -r file="$1"; shift
    local command=''

    if [ -z "${checksum}" ]; then
        return
    fi

    case "${hash}" in
      'MD5')
        command='md5sum'
        ;;
      'SHA1')
        command='sha1sum'
        ;;
      'SHA224')
        command='sha224sum'
        ;;
      'SHA256')
        command='sha256sum'
        ;;
      'SHA384')
        command='sha384sum'
        ;;
      'SHA512')
        command='sha512sum'
        ;;
    esac

    if isCommandAvailable "${command}"; then
        printf 'Checking %s of ' "${hash}"
        if ! "${command}" --check - <<< "${checksum}  ${file}"; then
            exit 2
        fi
    else
        warning "%s: Command not found.\n  Can't check %s sum." \
            "${command}" "${hash}"
    fi
}

function normalDownload()
{
    local -r -i doDownload="$1"; shift
    local -r -i doChecksum="$1"; shift
    local -r sha1="$1"; shift
    local -r sha256="$1"; shift
    local -r sha512="$1"; shift
    local -r md5="$1"; shift
    local -r url="$1"; shift
    local -r outFile="${1:-${url##*/}}"; shift

    local -r -a knownHashes=('MD5' 'SHA1' 'SHA256' 'SHA512')
    local dwlFile=''
    local checksum=''

    dwlFile="${outFile}.download"
    for file in "${outFile}" "${dwlFile}"; do
        if [[ -e "${file}" ]]; then
            die 3 "'%s': File already exists." "${file}"
        fi
    done

    echo URL="'${url}'" > "${dwlFile}"
    echo OUT_FILE="'${outFile}'" >> "${dwlFile}"

    if (( doDownload )); then
        download "${url}" "${outFile}"
    fi

    for hash in "${knownHashes[@]}"; do
        case "${hash}" in
            'MD5') checksum="${md5}";;
            'SHA1') checksum="${sha1}";;
            'SHA256') checksum="${sha256}";;
            'SHA512') checksum="${sha512}";;
            *) checksum='';;
        esac

        if [[ -n "${checksum}" ]]; then
            checkChecksum "${hash}" "${checksum}" "${outFile}"
        fi
    done

    if (( doChecksum )); then
        for hash in "${knownHashes[@]}"; do
            mkChecksum "${hash}" "${outFile}" >> "${dwlFile}"
        done
    fi

    logDateAndTime "${dwlFile}"
}

function configDownload()
{
    local -r -i doDownload="$1"; shift
    local -r -i doChecksum="$1"; shift
    local -r dwlFile="$1"; shift

    local -r knownHashes=('SHA1' 'SHA224' 'SHA256' 'SHA384' 'SHA512' 'MD5')

    local URL=''
    local OUT_FILE=''
    # shellcheck disable=SC2034
    local MD5SUM=''
    # shellcheck disable=SC2034
    local SHA1SUM=''
    # shellcheck disable=SC2034
    local SHA224SUM=''
    # shellcheck disable=SC2034
    local SHA256SUM=''
    # shellcheck disable=SC2034
    local SHA384SUM=''
    # shellcheck disable=SC2034
    local SHA512SUM=''

    if [[ -f "${dwlFile}" && -r "${dwlFile}" ]]; then
        # shellcheck source=/dev/null
        source "${dwlFile}"
    else
        die 3 "'%s': File doesn't exist or is not readable." "${dwlFile}"
    fi

    if [ -z "${OUT_FILE}" ]; then
        OUT_FILE="${URL##*/}"
    fi

    if (( doDownload )); then
        download "${URL}" "${OUT_FILE}"
    fi

    if (( doChecksum )); then
        local hashValue
        for hash in "${knownHashes[@]}"; do
            eval "hashValue=\"\${${hash}SUM}\""
            checkChecksum "${hash}" "${hashValue}" "${OUT_FILE}"
        done
    fi
}
function main() {
    # This function makes sure that this subcommand was executed using
    # expected calling convention.  If it wasn't it will terminate this
    # script with appropriate error message.  It is hard to guarantee
    # anything in case of it being executed in any other way.  Mentioned
    # calling convention is described in a dedicated manual page:
    #
    #   command-wrapper-subcommand-protocol(7)
    dieIfExecutedOutsideOfCommandWrapperEnvironment

    local -i doDownload=1
    local -i doChecksum=1
    local configFile=''
    local url=''
    local outFile=''
    local arg=''
    local sha1=''
    local sha256=''
    local sha512=''
    local md5=''
    local httpProxy=''
    local -a restArgs=()

    # It is upto subcommand to decide what command linen options should be
    # supported, and how they should be parsed, but each subcommand has to
    # support following:
    #
    # * --help, -h
    # * --completion-info
    #
    # See Command Wrapper's Subcommand Protocol for more information.  It is
    # available in the form of command-wrapper-subcommand-protocol(7) manual
    # page.
    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            # Supporting '--help' is required by the Subcommand Protocol.
            -h|--help)
                printHelp
                exit 0
                ;;

            # Supporting '--completion-info' is required by the Subcommand
            # Protocol.
            --completion-info)
                completionInfo
                exit 0
                ;;

            # Implementation of command line completion.  It is upto individual
            # subcommands to decide how this should be implemented, however
            # the implementation of '--completion-info' has to print Dhall
            # expression that is consistent with the choosen approach.
            --completion)
                completion "$@"
                exit 0
                ;;

            '--no-checksum')
                doChecksum=0
                ;;

            '--checksum')
                doChecksum=1
                ;;

            '--check')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                doChecksum=1
                doDownload=0
                configFile="$1"; shift
                ;;

            '--check='*)
                doChecksum=1
                doDownload=0
                configFile="${arg#*=}"
                ;;

            '-c'|'--config')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                configFile="$1"; shift
                ;;

            '--config='*)
                configFile="${arg#*=}"
                ;;

            '--sha1')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                sha1="$1"; shift
                ;;

            '--sha1='*)
                sha1="${arg#*=}"
                ;;

            '--sha256')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                sha256="$1"; shift
                ;;

            '--sha256='*)
                sha256="${arg#*=}"
                ;;

            '--sha512')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                sha512="$1"; shift
                ;;

            '--sha512='*)
                sha512="${arg#*=}"
                ;;

            '--md5')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                md5="$1"; shift
                ;;

            '--md5='*)
                md5="${arg#*=}"
                ;;

            '--http-proxy')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                httpProxy="$1"; shift
                ;;

            '--http-proxy='*)
                httpProxy="${arg#*=}"
                case "${httpProxy}" in
                    '') ;;
                    'http://'*) ;;
                    *) httpProxy="http://${httpProxy}";;
                esac
                ;;

            '-d'|'--download')
                doDownload=1
                ;;

            '-n'|'--no-download')
                doDownload=0
                ;;

            '-o'|'--output')
                if (( $# == 0 )); then
                    die 1 "'%s': Option is missing an argument." "${arg}"
                fi
                outFile="$1"; shift
                ;;

            '--output='*)
                outFile="${arg#*=}"
                ;;

            -*)
                die 1 "'%s': Unknown option." "${arg}"
                ;;

            *)
                restArgs=("${restArgs[@]}" "${arg}")
                ;;
        esac
    done

    # Subcommands aren't required to use configuration files.  If you don't
    # need it then just delete or commend-out config file related code.
    #
    # When subcommand is using configuration file and that doesn't exist it
    # is allowed to do one of the following:
    #
    # 1. Use hardcoded defaults.
    # 2. Fail with error message indicating that the configuration file is
    #    missing.
    #
    # In case of first option subcommand is allowed to generate default
    # configuration file.
    #
    # See command-wrapper-subcommand-protocol(7) manual page for more
    # information.
    if [[ ! -e "${COMMAND_WRAPPER_CONFIG}" ]]; then
        #notice "'%s': Generating default configuration file." \
        #    "${COMMAND_WRAPPER_CONFIG}"

        #cat > "${COMMAND_WRAPPER_CONFIG}" <<< '{=}'

        # Alternative would be to use 'dhall format', however, it doesn't
        # preserve comments at the moment.
        #dhall format > "${COMMAND_WRAPPER_CONFIG}" <<< '{=}'

        # In case of choosing option 2.
        #die 1 "'%s': Configuration file is missing." \
        #    "${COMMAND_WRAPPER_CONFIG}"
        :
    fi

    #out "'%s': Loading configuration file." "${COMMAND_WRAPPER_CONFIG}"
    #eval "$(declareCfg "${COMMAND_WRAPPER_CONFIG}" 'config')"
    #out "'%s': Configuration file loaded." "${COMMAND_WRAPPER_CONFIG}"

    if [[ -z "${configFile}" ]]; then
        if (( ${#restArgs[@]} == 0 )); then
            die 1 'Too few arguments.'
        elif (( ${#restArgs[@]} > 2 )); then
            die 1 'Too many arguments.'
        elif (( ${#restArgs[@]} == 2 )); then
            if [[ -n "${outFile}" ]]; then
                die 1 "'%s': Output file already defined as: '%s'" \
                    "${restArgs[1]}" "${outFile}"
            fi
            outFile="${restArgs[1]}"
        fi
        url="${restArgs[0]}"
    elif (( ${#restArgs[@]} > 0 )); then
        die 1 'Too many arguments.'
    fi

    if [[ -n "${httpProxy}" ]]; then
        export http_proxy="${httpProxy}"
    fi

    if [[ -n "${configFile}" ]]; then
        configDownload \
            "${doDownload}" \
            "${doChecksum}" \
            "${configFile}"
    else
        if (( !doDownload )); then
            # Don't check, since we don't have a file to do that for.
            doChecksum=0
        fi
        normalDownload \
            "${doDownload}" \
            "${doChecksum}" \
            "${sha1}" \
            "${sha256}" \
            "${sha512}" \
            "${md5}" \
            "${url}" \
            "${outFile}"
    fi
}

main "$@"
