#!/usr/bin/env bash

# Compatibility wrapper that provides xpdf-like command line interface for
# other PDF viewers.
#
# Based on:
# <https://github.com/trskop/snippets/blob/master/scripts/xpdf-compat.sh>

# Copyright (c) 2013, 2014, 2019, Peter Trsko <peter.trsko@gmail.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#     * Neither the name of Peter Trsko nor the names of other
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e

if [[ "${COMMAND_WRAPPER_VERBOSITY:-}" == 'annoying' ]]; then
    # This will cause Bash to print commands before executing them.
    set -x
fi

# shellcheck source=/dev/null
source <(
    COMMAND_WRAPPER_INVOKE_AS="${COMMAND_WRAPPER_NAME}" "${COMMAND_WRAPPER_EXE}" \
        completion --library --shell=bash
)

# Print help message to standard output.
function printHelp() {
    local -r command="${COMMAND_WRAPPER_NAME} ${COMMAND_WRAPPER_SUBCOMMAND}"
    local -r commandHelp="${COMMAND_WRAPPER_NAME} help ${COMMAND_WRAPPER_SUBCOMMAND}"

    cat <<EOF
Compatibility wrapper that provides xpdf-like command line interface for other
PDF viewers.

Usage:

  ${command} [--fullscreen] [PDF_FILE [PAGE_NUMBER|+NAMED_DESTINATION]]
  ${command} {--help|-h}
  ${commandHelp}

Options:

  --fullscreen, -fullscreen

    Open PDF viewer in fullscreen mode if it's supported.

  --help, -h, -?, -help
      Print short help message and exit.  Same as: ${commandHelp}
EOF
}

# Print Dhall expression that describes how this subcommand should be invoked
# when performing command line completion.  See
# `command-wrapper-subcommand-protocol(7)` for more details on how this works.
function completionInfo() {
    cat <<"EOF"
  λ(shell : < Bash | Fish | Zsh >)
→ λ(index : Natural)
→ λ(words : List Text)
→   [ "--completion"
    , "--index=${Natural/show index}"
    , "--shell=${merge {Bash = "bash", Fish = "fish", Zsh = "zsh"} shell}"
    , "--"
    ]
  # words
EOF
}

# Perform command line completion.
#
# Usage:
#
#   completion [--index=INDEX] [--shell=SHELL] [[--] WORD [...]]
#
# Bash itself provides `compgen` builtin command that can do a lot of standard
# command line completion functions.  See `bash(1)` or `help compgen` for more
# details.
function completion() {
    local index=-1
    local -a words=

    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            --index=*)
                index="${arg#*=}"
                ;;
            --shell=*)
                # Ignored for now.
                ;;
            --)
                words=("$@")
                break
                ;;
            -*)
                die 1 "'%s': Unknown completion option." "${arg}"
                ;;
            *)
                words=("${arg}" "$@")
                break
                ;;
        esac
    done

    if (( ! ${#words[@]} )); then
        words=("")
    fi

    local -r currentWord="${words[${index}]}"

    local -i hadDashDash=0
    local -a previousWords=()
    if (( index )); then
        previousWords=("${words[@]:0:$((index - 1))}")
    fi

    for opt in "${previousWords[@]}"; do
        if [[ "${opt}" = '--' ]]; then
            hadDashDash=1
            break
        fi
    done

    if (( ! hadDashDash )) && [[ "${currentWord}" == -* ]]; then
        compgen -W '--help -h -fullscreen --fullscreen' -- "${currentWord}"
    else
        compgen -d -- "${currentWord}" || true
        shopt -s extglob
        compgen -f -X '!*.@(pdf|PDF|fdf|FDF)?(.@(gz|GZ|xz|XZ|Z|bz2|BZ2))' \
            -- "${currentWord}"
    fi
}

function haveCommand()
{
    command -v "$1" >& /dev/null
}

# Determine pager application to use.
#
# Usage:
#
#   sensiblePager
#
# Environment variables:
#
#   PAGER
function sensiblePager() {
    # Debian/Ubuntu provides 'sensible-pager' wrapper for selecting pager
    # application and alternatives framework provides 'pager' symbolic link for
    # system-wide prefered implementation.
    local -r -a pagerPreferences=(
        'sensible-pager'
        "${PAGER}"
        'pager'
        'less'
        'more'
    )

    for cmd in "${pagerPreferences[@]}"; do
        if [[ -z "${cmd}" ]]; then
            # $PAGER: Variable not set, ignored.
            continue
        fi

        if haveCommand "${cmd}"; then
            echo "${cmd}"
            return 0
        fi
    done

    return 1
}

function sensiblePdfViewer() {
    local -a -r knownCommands=(
        'evince'
        'atril'
        'gv'
        'pdftotext'
    )
    local -A -r hasGui=(
        ['evince']=1
        ['atril']=1
        ['gv']=1
        ['pdftotext']=0
    )

    for cmd in "${knownCommands[@]}"; do
        # Skip GUI applications if there is no X server available.
        if (( ${hasGui[${cmd}]} )) && [[ -z "${DISPLAY}" ]]; then
            continue
        fi

        if haveCommand "${cmd}"; then
            echo "${cmd}"
            return 0
        fi
    done

    return 1
}

function main() {
    # This function makes sure that this subcommand was executed using
    # expected calling convention.  If it wasn't it will terminate this
    # script with appropriate error message.  It is hard to guarantee
    # anything in case of it being executed in any other way.  Mentioned
    # calling convention is described in a dedicated manual page:
    #
    #   command-wrapper-subcommand-protocol(7)
    dieIfExecutedOutsideOfCommandWrapperEnvironment

    local -a atrilOptions=()
    local -a evinceOptions=()
    local -a gvOptions=()
    local -a pdftotextOptions=()

    local -i haveFile=0
    local -i havePosition=0

    # It is upto subcommand to decide what command linen options should be
    # supported, and how they should be parsed, but each subcommand has to
    # support following:
    #
    # * --help, -h
    # * --completion-info
    #
    # See Command Wrapper's Subcommand Protocol for more information.  It is
    # available in the form of command-wrapper-subcommand-protocol(7) manual
    # page.
    local arg
    while (( $# )); do
        arg="$1"; shift
        case "${arg}" in
            # Supporting '--help' is required by the Subcommand Protocol.
            --help|-h|'-?'|-help)
                printHelp
                exit 0
                ;;

            # Supporting '--completion-info' is required by the Subcommand
            # Protocol.
            --completion-info)
                completionInfo
                exit 0
                ;;

            # Implementation of command line completion.  It is upto individual
            # subcommands to decide how this should be implemented, however
            # the implementation of '--completion-info' has to print Dhall
            # expression that is consistent with the choosen approach.
            --completion)
                completion "$@"
                exit 0
                ;;

            --fullscreen|-fullscreen)
                atrilOptions+=('--fullscreen')
                evinceOptions+=('--fullscreen')
                gvOptions+=('--fullscreen')
                # Doesn't make sense for pdftotext, ignored.
                ;;

            -*)
                die 1 "'%s': Unknown option." "${arg}"
                ;;

            *)
                if (( haveFile && havePosition )); then
                    die 1 "'%s': Too many arguments." "${arg}"
                fi

                if (( ! haveFile )); then
                    haveFile=1
                    atrilOptions+=("${arg}")
                    evinceOptions+=("${arg}")
                    gvOptions+=("${arg}")
                    pdftotextOptions+=("${arg}")
                else
                    havePosition=1
                    case "$arg" in
                      +*)
                        atrilOptions+=("--page-label=${arg#+}")
                        evinceOptions+=("--page-label=${arg#+}")
                        gvOptions+=("--page=${arg#+}")
                        # Doesn't make sense for pdftotext, ignored.
                        ;;
                      *)
                        if grep -q -E '^[0-9]+$' <<< "${arg}"; then
                            atrilOptions+=("--page-index=$arg")
                            evinceOptions+=("--page-index=$arg")
                            gvOptions+=("--page=$arg")
                        else
                            die 1 "'%s': Not a page number." "${arg}"
                        fi
                        ;;
                    esac
                fi
                ;;
        esac
    done

    # Send output of pdftotext to a pipe instead of a file.
    # TODO: Consider usage of temporary file.
    pdftotextOptions=("${pdftotextOptions[@]}" '-')

    local pdfViewer
    if ! pdfViewer="$(sensiblePdfViewer)"; then
        die 127 'Unable to find suitable PDF viewer.'
    fi

    local -a options
    eval "options=(\"\${${pdfViewer}Options[@]}\")"

    if (( ! haveFile )); then
        die 2 '%s: PDF_FILE: Missing argument.' "${pdfViewer}"
    fi

    case "${pdfViewer}" in
        # Find a better way how to do this.
        pdftotext)
            if [[ -t 1 ]]; then
                local pagerCmd
                if ! pagerCmd="$(sensiblePager)"; then
                    die 127 '%s\n\n    %s' \
                        'Unable to find suitable pager.' \
                        'Consider setting up PAGER environment variable.'
                fi

                : pdfViewer="${pdfViewer}"
                : 'pdfViewerOptions=(' "${options[@]}" ')'
                : pagerCmd="${pagerCmd}"
                exec "${pdfViewer}" "${options[@]}" | "${pagerCmd}"
            else
                : pdfViewer="${pdfViewer}"
                : 'pdfViewerOptions=(' "${options[@]}" ')'
                exec "${pdfViewer}" "${options[@]}"
            fi
            ;;
        *)
            : pdfViewer="${pdfViewer}"
            : 'pdfViewerOptions=(' "${options[@]}" ')'
            exec "${pdfViewer}" "${options[@]}"
            ;;
    esac
}

main "$@"
